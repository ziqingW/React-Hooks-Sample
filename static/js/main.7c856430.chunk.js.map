{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","initialItems","content","title","inputDisplay","Array","length","fill","_useState","useState","_useState2","Object","slicedToArray","display","setDisplay","_useState3","_useState4","newContent","setNewContent","_useState5","_useState6","items","setItems","titleColors","className","map","item","i","key","style","backgroundColor","singleItem","j","onClick","newItems","JSON","parse","stringify","splice","delItem","newDisplay","toConsumableArray","addItem","rows","onChange","e","target","value","addInput","trim","push","addContent","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cCHD,WACb,IAAMC,EAAe,CACnB,CACAC,QAAS,CAAC,aACV,eACA,uBACAC,MAAO,SAEP,CACAD,QAAS,CAAC,kBACV,cACA,cACA,wBACAC,MAAO,QAEP,CACAD,QAAS,CAAC,2BACV,iBACA,oBACAC,MAAO,WAEP,CACAD,QAAQ,CAAC,2BACT,kBACA,mCACAC,MAAO,OAGHC,EAAeC,MAAMJ,EAAaK,QAAQC,MAAK,GA5BzBC,EA6BEC,mBAASL,GA7BXM,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GA6BrBK,EA7BqBH,EAAA,GA6BZI,EA7BYJ,EAAA,GAAAK,EAqCQN,mBAAS,IArCjBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAqCrBE,EArCqBD,EAAA,GAqCTE,EArCSF,EAAA,GAAAG,EA0CFV,mBAASR,GA1CPmB,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GA0CrBE,EA1CqBD,EAAA,GA0CdE,EA1CcF,EAAA,GA0DtBG,EAAc,CAAC,UAAW,UAAW,UAAW,WACtD,OACEzB,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,WACZH,EAAMI,IAAI,SAACC,EAAMC,GAChB,OACE7B,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,cAAcI,IAAKD,GAChC7B,EAAAC,EAAAC,cAAA,MAAI6B,MAAO,CAACC,gBAAiBP,EAAYI,KAAMD,EAAKvB,OACpDL,EAAAC,EAAAC,cAAA,UACG0B,EAAKxB,QAAQuB,IAAI,SAACM,EAAYC,GAAb,OAAmBlC,EAAAC,EAAAC,cAAA,MAAI4B,IAAKI,GAAGlC,EAAAC,EAAAC,cAAA,UAAQwB,UAAU,cAAcS,QAAS,kBAbtG,SAAiBN,EAAGK,GAClB,IAAIE,EAAWC,KAAKC,MAAMD,KAAKE,UAAUhB,IACzCa,EAASP,GAAGzB,QAAQoC,OAAON,EAAG,GAC9BV,EAASY,GAUiGK,CAAQZ,EAAGK,KAA1D,KAAwElC,EAAAC,EAAAC,cAAA,KAAGwB,UAAU,WAAWO,OAEjJlB,EAAQc,GAA+E,KAAzE7B,EAAAC,EAAAC,cAAA,UAAQwB,UAAU,cAAcS,QAAS,kBAtCnE,SAAiBN,GACfT,EAAc,IACd,IAAIsB,EAAU7B,OAAA8B,EAAA,EAAA9B,CAAOP,GACrBoC,EAAWb,IAAK,EAChBb,EAAW0B,GAkC4DE,CAAQf,KAAvD,KACfd,EAAQc,GAAM7B,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,YAAU2C,KAAK,IAAIC,SAAU,SAAAC,GAAC,OA/B5D,SAAkBA,GAChB3B,EAAc2B,EAAEC,OAAOC,OA8BuCC,CAASH,MAAK/C,EAAAC,EAAAC,cAAA,UAAQwB,UAAU,YAAYS,QAAS,kBA1BrH,SAAoBN,GAClB,IAAIO,EAAWC,KAAKC,MAAMD,KAAKE,UAAUhB,IACrCJ,EAAWgC,OAAO3C,SACpB4B,EAASP,GAAGzB,QAAQgD,KAAKjC,GACzBK,EAASY,GACThB,EAAc,KAEhBJ,EAAWV,GAmB8G+C,CAAWxB,KAAxD,OAAiF,UDlEjJ,MAASyB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7c856430.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from 'react';\nimport './App.css';\n\nexport default function App() {\n  const initialItems = [\n    {\n    content: ['Drink milk',\n    'Feed the cat',\n    'Dry washing clothes'],\n    title: 'Great'\n  },\n    {\n    content: ['Coding practice',\n    'Read a blog',\n    'Sing a song',\n    'Try a cooking recipe'],\n    title: 'Nice'\n  },\n    {\n    content: ['Sneak into the classroom',\n    'Code challenge',\n    'Grocery shopping'],\n    title: 'Average'\n  },\n    {\n    content:['Write coverletter, again',\n    'Apply more jobs',\n    'Receive denial one more time XD'],\n    title: 'OK'\n  }\n];\n  const inputDisplay = Array(initialItems.length).fill(false);\n  const [display, setDisplay] = useState(inputDisplay);\n  function addItem(i) {\n    setNewContent('');\n    let newDisplay = [...inputDisplay];\n    newDisplay[i] = true;\n    setDisplay(newDisplay);\n  }\n\n  const [newContent, setNewContent] = useState('');\n  function addInput(e) {\n    setNewContent(e.target.value);\n  }\n\n  const [items, setItems] = useState(initialItems);\n  function addContent(i) {\n    let newItems = JSON.parse(JSON.stringify(items));\n    if (newContent.trim().length) {\n      newItems[i].content.push(newContent);\n      setItems(newItems);\n      setNewContent('');\n    }\n    setDisplay(inputDisplay);\n  }\n\n  function delItem(i, j) {\n    let newItems = JSON.parse(JSON.stringify(items));\n    newItems[i].content.splice(j, 1);\n    setItems(newItems);\n  }\n  const titleColors = ['#f49841', '#7641f4', '#337add', '#179322'];\n  return (\n    <div className=\"wrapper\">\n      {items.map((item, i) => {\n        return (\n          <div className=\"single-card\" key={i}>\n            <h3 style={{backgroundColor: titleColors[i]}}>{item.title}</h3>\n            <ul>\n              {item.content.map((singleItem, j) => <li key={j}><button className=\"btn btn-del\" onClick={() => delItem(i, j)}>-</button><p className=\"content\">{singleItem}</p></li>)}\n            </ul>\n            {!display[i] ? (<button className=\"btn btn-add\" onClick={() => addItem(i)}>+</button>) : null}\n            {display[i] ? (<div><textarea rows=\"4\" onChange={e => addInput(e)}/><button className=\"btn-input\" onClick={() => addContent(i)}>OK</button></div>) : null}\n        </div>)\n      })}\n    </div>\n  );\n}\n"],"sourceRoot":""}